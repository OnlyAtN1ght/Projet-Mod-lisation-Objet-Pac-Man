-- Modelisation PacMan
--Alan PERRON / Simon PROVOT / Nicolas BLANCHARD


model Pacman


-- Classes
abstract class Entity
attributes
  x : Integer
  y : Integer

operations
getX() : Integer
  begin
    result := self.x
  end

getY() : Integer
  begin
    result := self.y
  end

show()
end


abstract class Character < Entity
operations
  move(dx : Integer, dy : Integer)
  begin
  	self.x := self.x + dx;
  	self.y := self.y + dy
  end
end


class Pacman < Character
attributes
  nb_lives : Integer
  score :Integer

operations
  updateScore(new_score : Integer)
  begin
  	self.score := self.score + new_score
  end

  getScore() : Integer
  begin
    result := self.score
  end

  resetScore()
  begin
    self.score := 0
  end

  -- ?????
  lose_life()
  begin
  	self.nb_lives := self.nb_lives - 1
  end
end


class Ghost < Character
end


class Rubber < Entity
attributes
  score : Integer
  isEaten : Boolean

operations
  disappear()
  -- ??????
  begin
  	self.isEaten := true
  end
end


class Wall < Entity
end


class Case
operations
end


class Level
attributes
  id : Integer
  number_rubbers : Integer
operations
  getNbRubber() : Integer
  begin
    result := self.number_rubbers
  end

  getId() : Integer
  begin
    result := self.id
  end

  setNbRubber(nb : Integer)
  begin
    self.number_rubbers := nb
  end
end


class Game
attributes
  high_score : Integer
  initialLives : Integer
  game_over : Boolean

operations
  setHighScore(new_high_score : Integer)
  begin
  	self.high_score := new_high_score
  end
  
  getHighScore() : Integer
  begin
    result := self.high_score
  end
end



-- associations

composition contain between
  Game[1] role game
  Level[1..*] role levels
end

association link between
  Entity[0..*] role entities
  Case[1] role cases
end

composition isComposed between 
  Level[1] role levels
  Case[0..*] role grid --0 OR 225 (15*15 grid)
end


constraints
-- Invariants

-- Pacman,Rubbers and Ghost can't be into walls
--OK
context Wall inv caracter_in_wall : 
 ( Wall.allInstances() -> exists(Character.allInstances() -> 
forAll(c | self.x <> c.x or self.y <> c.y)))
and (Wall.allInstances() -> exists(Rubber.allInstances() -> forAll(r | (self.x <> r.x) or (self.y <> r.y))))

-- If pacman hasnt enough life => game over
--OK
context Pacman inv gameover :
Pacman.allInstances() -> forAll(p | p.nb_lives <= 0)
implies (Game.allInstances() -> forAll(g | g.game_over = true))

-- The rubber's state change when it's been eaten.
--OK
--context Pacman inv eatRubberStateChange :
--Pacman.allInstances() -> forAll(r | Rubber.allInstances() -> select((self.x = r.x) and (self.y = r.y)) -> forAll(r | r.isEaten = true))

-- PRE / POST  CONDITION --

-- The object's types Characters can only move by one step on y and x axis.
-- A Character cannot be on a wall case.
--OK
context Character::move(dx : Real, dy : Real)
pre: (dx = 1 and dy = 0) or (dx = 0 and dy = 1) or (dx = 0 and dy = -1) or (dx = -1 and dy = 0)
pre: Wall.allInstances() -> select(self.x + dx = x and self.y + dy = y) -> isEmpty
post: self.x = self.x@pre + dx 
post: self.y = self.y@pre + dy

--OK
context Entity::getX() : Integer
post:result = self.x

--OK
context Entity::getY() : Integer
post:result = self.y

--OK
context Pacman::updateScore(new_score : Integer)
pre: new_score >= 0
post: self.score = new_score + self.score@pre

--OK
context Pacman::getScore() : Integer
post: result = self.score

--OK
context Game::setHighScore(new_high_score : Integer)
pre : new_high_score >= 0
pre : new_high_score >= self.high_score
post: self.high_score = new_high_score

--OK
context Game::getHighScore() : Integer
post: result = self.high_score

--OK
context Level::getNbRubber() : Integer
post: result = self.number_rubbers

--OK
context Level::setNbRubber(nb : Integer)
pre: nb >= 0
post: self.number_rubbers = nb

--OK
context Level::getId() : Integer
post: result = self.id